apply plugin: 'com.android.application'

android {
    sourceSets {
        main.res.srcDirs = ['src/main/res']
        main.jniLibs.srcDirs = ['src/main/libs']
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
        disable 'MissingApplicationIcon'
        disable 'TrustAllX509TrustManager'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path "CMakeLists.txt"
        }
    }

    ndkVersion "23.0.7599858"
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 26
        applicationId "sdl.vulkan"
        externalNativeBuild {
            cmake {
                arguments "APP_PLATFORM=android-26", "-DANDROID_TOOLCHAIN=clang",
                        "-DJNI_LIBS=${android.sourceSets.main.jniLibs.srcDirs.join('')}"
            }
        }
        ndk {
            ldLibs "android", "log"
            abiFilters /*'x86_64',*/ 'arm64-v8a'
            /* 'x86', 'armeabi', 'armeabi-v7a'*/
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include /*"x86_64",*/ "arm64-v8a"

            // Specifies that we want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
}

dependencies {
    implementation fileTree(dir: '.', include: ['*.jar', '*.so'])
}
